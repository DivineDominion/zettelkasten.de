#!/usr/bin/env ruby
# coding: utf-8

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

ENV['NANOC_ENV'] ||= 'development'

require 'compass'
Compass.add_project_configuration 'compass_config.rb'

BYPASS_FILES = %w(404.html crossdomain.xml humans.txt robots.txt googlebd82924855df6b5d.html) unless defined?(BYPASS_FILES)
is_deploying = false

# from https://github.com/mgutz/nanoc3_blog/blob/master/Rules
preprocess do
  config[:env] = ENV['NANOC_ENV'] ||= 'development'
  config[:is_deploying] = config[:env] == 'deployment'
  is_deploying = config[:is_deploying]

  # authors may unpublish items by setting meta attribute publish: false
  items.delete_if { |item| item[:publish] == false }

  tags("article").each do |tag|
    @items.create(
      "",
      {
        :title => %Q{Posts tagged &ldquo;#{tag}&rdquo;},
        :tag => tag,
        :mtime => Time.now#parse(Date.now) # for the sitemap
        # TODO ^-- this is wrong, use last post
      },
      "/posts/tags/#{tag}"
    )
  end

  years, months = Post::years_and_months(posts())

  years.each do |year|
    @items.create(
      "<%= render '/_posts_per_time.*', :from => '#{year}-01-01', :to => '#{year}-12-31' %>",
      {
        :title => %Q{Posts from #{year}},
        :mtime => Time.now # TODO last post
      },
      "/posts/#{year}"
    )
  end

  months.map { |m| Month.new(m) }.each do |month|
    @items.create(
      "<%= render '/_posts_per_time.*', :from => '#{month.first_day}', :to => '#{month.last_day}' %>",
      {
        :title => %Q{Posts from #{month.title} #{month.year}},
        :mtime => Time.now # TODO last post
      },
      month.post_url
    )
  end
end

BYPASS_FILES.each do |file|
  passthrough "/#{file}"
end

ignore '/**/_*' # don't compile and route partials (used for SASS, JS)

compile '/css/**/*' do
  filter :erb          # Use erb to enable timestamps and author information and such.
  filter :sass, Compass.sass_engine_options
  write item.identifier.without_ext + ".css"
end

compile '/js/**/*' do
   filter :concat_js
   filter :uglify_js
   write item.identifier.without_ext + '.js'
end

compile '/img/**/*' do
  #filter :image_compressor, IMAGE_COMPRESS_OPTIONS if item.binary? && is_deploying
end

compile '/sitemap.*' do
  filter :erb
  write item.identifier.to_s
end

compile '/htaccess.*' do
  filter :erb
  write '/.htaccess'
end

#
# Blog
#

compile '**/feed.atom' do
  filter :erb
  write item.identifier.to_s
end

compile '/posts/tags.md' do
  filter :erb
  filter :kramdown
  filter :typogruby

  layout '/plain.*'
end

compile '/posts/tags/**/*' do
  filter :erb

  layout '/tags.*'
end

compile %r{^/posts/\d{4}(/\d{2})?$} do
  filter :erb
  layout '/plain.*'
end

compile '/posts/{index,overview}.*' do
  filter :erb
  filter :kramdown
  filter :typogruby
  filter :add_ids_to_headers

  layout '/plain.*'

  filter :add_toc
end

compile '/posts/**/*' do
  if item.binary?
    # don't need this since the post images are stored outside anyway
    #   filter :thumbnailize, :width => 1500
  else # don’t filter binary items
    filter :erb

    if item[:lang] == 'mmd'
      filter :mmd
    else
      filter :kramdown
    end

    filter :typogruby
    filter :add_ids_to_headers

    layout '/blog.*'

#    filter :add_toc
  end
end

#
# Misc content
#

compile '/**/*' do
  if item.binary?
    write item.identifier.to_s
    next
  end

  case item[:extension]
    when 'md', 'markdown', 'txt', 'text'
      filter :erb
      filter :kramdown
      filter :typogruby
    when 'haml'
      filter :haml
    else
      filter :erb
      filter :typogruby
  end

  if item[:layout]
    layout '/'+item[:layout]+'.*'
  else
    layout '/plain.*'
    # layout 'default' # use if basic `section > h1` setting doesn't suffice
  end
end


############################################################################

route '/404.*' do
  item.identifier.without_ext + '.html'
end

route '/posts/**/*' do
  if item.binary?
    id = item.identifier.components.last
    post_id = item.identifier.components[-2]

    "/posts/" + post_id + "/" + id
  elsif item[:kind] == 'article'
    identifier = item.identifier.without_ext
      .gsub(/\d{4}\/\d{2}\//, "") # remove date portion
      .gsub(/\/index$/, "") # drop index file name
    identifier + '/index.html'
  else # tags, date archives
    if item.identifier.without_ext =~ %r{/index$}
      item.identifier.without_ext + '.html'
    else
      item.identifier.without_ext + '/index.html'
    end
  end
end

route '/**/*' do
  if item.binary?
    item.identifier.to_s
  else
    if item.identifier.without_ext =~ %r{/index$}
      item.identifier.without_ext + '.html'
    else
      item.identifier.without_ext + '/index.html'
    end
  end
end

############################################################################

layout '/**/*', :erb
